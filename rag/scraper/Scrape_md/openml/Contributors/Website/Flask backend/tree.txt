Segment 1
### (h3)
[]

### (h3)
[]

###Design (h3)
Out flask app follows [Application factories design pattern](https://flask.palletsprojects.com/en/1.1.x/patterns/appfactories/).
A new app instance can be created by:
``` python
    from autoapp import create_app
    app = create_app(config_object)
```

The backend is designed in a modular fashion with flask [Blueprints](https://flask.palletsprojects.com/en/1.0.x/blueprints/). Currently,
the flask app consists of two blueprints public and user:
<ul><li>Public blueprint: contains routes that do not require user authentication or authorization. like signup and forgot password.</li>
<li>User blueprint: Contains routes which require user authentication like login, changes in profile and fetching API key.</li></ul>

<p>New blueprints can be registered in `server/app.py` with register_blueprints function:</p>

``` python
    def register_blueprints(app):
        app.register_blueprint(new_blueprint)
```





----------------------------------------
Segment 2
### (h3)
[]

### (h3)
[]

###Database setup (h3)
If you want o setup a local user database similar to OpenML then follow these steps:
<ol>
<li>Install MySQL</li>
<li>Create a new database 'openml'</li>
<li>Set current database to 'openml' via use method</li>
<li>Download users.sql file from openml.org github repo and add it in the openml db via "mysql -u root -p openml < users.sql"</li>
<li>Edit the database path in `server/extensions.py` and `server/config.py`</li>
</ol>
Note: Remember to add passwords and socket extension address(if any) in both in `server/extensions.py` and `server/config.py` 





----------------------------------------
Segment 3
### (h3)
[]

### (h3)
[]

###Security (h3)
Flask backend uses [JSON web tokens](https://jwt.io/) for all the user handling tasks. [Flask JWT extended](https://flask-jwt-extended.readthedocs.io/en/stable/) library is used to bind JWT with the flask app.
Current Mechanism is :
<ol>
<li> User logs in.</li>
<li> JWT token is assigned to user and sent with every request to frontend.</li>
<li> All the user information can only be accessed with a JWT token like edit profile and API-key.</li>
<li> The JWT token is stored in local memory of the browser.</li>
<li> The token get expired after 2 hours or get blacklisted after logout.</li>
</ol>
<p>JWT is registered as an extension in `server/extensions.py`.
All the user password hash are saved in Argon2 format with the new backend.</p>




----------------------------------------
Segment 4
### (h3)
[]

### (h3)
[]

###Registering Extensions (h3)
To register a new extension to flask backend extension has to be added in `server/extensions.py` and initialized in server/app.py.
Current extensions are : flask_argon2, flask_bcrypt, flask_jwt_extended and flask_sqlalchemy.




----------------------------------------
Segment 5
### (h3)
[]

### (h3)
[]

###Configuring App (h3)
Configuration variables like secret keys, Database URI and extension configurations are specified in 
`server/config.py` with Config object, which is supplied to the flask app during initialization.




----------------------------------------
Segment 6
### (h3)
[]

### (h3)
[]

###Creating a new route (h3)
To create a new route in backend you can add the route in `server/public/views.py` or `server/user/views.py` (if it requires user authorisation or JWT usage in any way).  
 



----------------------------------------
Segment 7
### (h3)
[]

### (h3)
[]

###Bindings to OpenML server (h3)
You can specify which OpenML server to connect to.
This is stored in the `.env` file in the main directory. It is set to the main OpenML server by default:

``` python
    ELASTICSEARCH_SERVER=https://www.openml.org/es
    OPENML_SERVER=https://www.openml.org
```

The ElasticSearch server is used to download information about datasets, tasks, flows and runs, as well as to power the frontend search. The OpenML server is used for uploading datasets, tasks, and anything else that requires calls to the OpenML API.




----------------------------------------
Segment 8
### (h3)
[]

### (h3)
[]

###Bindings to frontend (h3)
The frontend is generated by [React](https://reactjs.org/). See below for more information. The React app is loaded as a static website. This is done in Flask setup in file `server.py`.

``` python
    app = Flask(__name__, static_url_path='', static_folder='src/client/app/build')
```

It will find the React app there and load it.




----------------------------------------
Segment 8
### (h3)
[]

### (h3)
[]

###Email Server (h3)
OpenML uses its own mail server, You can use basically any mail server compatible with python SMTP library. Our suggestion is to use mailtrap.io for local testing. You can configure email server configurations in .env file. Currently we only use emails for confirmation email and forgotten password emails.



----------------------------------------
