(Table of Contents)
Why is NumPy Fast? (h1)
Who Else Uses NumPy? (h1)


(Page path)
(h1) Why is NumPy Fast?

(Segment 1)
#Why is NumPy Fast? (h1)

Vectorization describes the absence of any explicit looping, indexing,
etc., in the code - these things are taking place, of course, just
"behind the scenes" in optimized, pre-compiled C code.  Vectorized
code has many advantages, among which are:

- vectorized code is more concise and easier to read

- fewer lines of code generally means fewer bugs

- the code more closely resembles standard mathematical notation
(making it easier, typically, to correctly code mathematical
constructs)

- vectorization results in more "Pythonic" code. Without
vectorization, our code would be littered with inefficient and
difficult to read ``for`` loops.

Broadcasting is the term used to describe the implicit
element-by-element behavior of operations; generally speaking, in
NumPy all operations, not just arithmetic operations, but
logical, bit-wise, functional, etc., behave in this implicit
element-by-element fashion, i.e., they broadcast.  Moreover, in the
example above, ``a`` and ``b`` could be multidimensional arrays of the
same shape, or a scalar and an array, or even two arrays of with
different shapes, provided that the smaller array is "expandable" to
the shape of the larger in such a way that the resulting broadcast is
unambiguous. For detailed "rules" of broadcasting see
:ref:`Broadcasting <basics.broadcasting>`.




--------------------------------------------------------------------------------
(Table of Contents)
Why is NumPy Fast? (h1)
Who Else Uses NumPy? (h1)


(Page path)
(h1) Who Else Uses NumPy?

(Segment 2)
#Who Else Uses NumPy? (h1)

NumPy fully supports an object-oriented approach, starting, once
again, with `~numpy.ndarray`.  For example, `~numpy.ndarray` is a class, possessing
numerous methods and attributes.  Many of its methods are mirrored by
functions in the outer-most NumPy namespace, allowing the programmer
to code in whichever paradigm they prefer. This flexibility has allowed the
NumPy array dialect and NumPy `~numpy.ndarray` class to become the *de-facto* language
of multi-dimensional data interchange used in Python.



--------------------------------------------------------------------------------
