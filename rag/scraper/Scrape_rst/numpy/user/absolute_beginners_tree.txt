(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Welcome to NumPy!

(Segment 1)
#Welcome to NumPy! (h1)

NumPy (**Numerical Python**) is an open source Python library that's used in
almost every field of science and engineering. It's the universal standard for
working with numerical data in Python, and it's at the core of the scientific
Python and PyData ecosystems. NumPy users include everyone from beginning coders
to experienced researchers doing state-of-the-art scientific and industrial
research and development. The NumPy API is used extensively in Pandas, SciPy,
Matplotlib, scikit-learn, scikit-image and most other data science and
scientific Python packages.

The NumPy library contains multidimensional array and matrix data structures
(you'll find more information about this in later sections). It provides
**ndarray**, a homogeneous n-dimensional array object, with methods to
efficiently operate on it. NumPy can be used to perform a wide variety of
mathematical operations on arrays.  It adds powerful data structures to Python
that guarantee efficient calculations with arrays and matrices and it supplies
an enormous library of high-level mathematical functions that operate on these
arrays and matrices.

Learn more about :ref:`NumPy here <whatisnumpy>`!




--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Installing NumPy

(Segment 2)
#Installing NumPy (h1)

To install NumPy, we strongly recommend using a scientific Python distribution.
If you're looking for the full instructions for installing NumPy on your
operating system, see `Installing NumPy <https://numpy.org/install/>`_.



If you already have Python, you can install NumPy with::

conda install numpy

or ::

pip install numpy

If you don't have Python yet, you might want to consider using `Anaconda
<https://www.anaconda.com/>`_. It's the easiest way to get started. The good
thing about getting this distribution is the fact that you don’t need to worry
too much about separately installing NumPy or any of the major packages that
you’ll be using for your data analyses, like pandas, Scikit-Learn, etc.




--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) How to import NumPy

(Segment 3)
#How to import NumPy (h1)

To access NumPy and its functions import it in your Python code like this::

import numpy as np

We shorten the imported name to ``np`` for better readability of code using
NumPy. This is a widely adopted convention that makes your code more readable
for everyone working on it. We recommend to always use import numpy as ``np``.




--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Reading the example code

(Segment 4)
#Reading the example code (h1)

If you aren't already comfortable with reading tutorials that contain a lot of code,
you might not know how to interpret a code block that looks
like this::

>>> a = np.arange(6)
>>> a2 = a[np.newaxis, :]
>>> a2.shape
(1, 6)

If you aren't familiar with this style, it's very easy to understand.
If you see ``>>>``, you're looking at **input**, or the code that
you would enter. Everything that doesn't have ``>>>`` in front of it
is **output**, or the results of running your code. This is the style
you see when you run ``python`` on the command line, but if you're using
IPython, you might see a different style. Note that it is not part of the
code and will cause an error if typed or pasted into the Python
shell. It can be safely typed or pasted into the IPython shell; the ``>>>``
is ignored.





--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) What’s the difference between a Python list and a NumPy array?

(Segment 5)
#What’s the difference between a Python list and a NumPy array? (h1)

NumPy gives you an enormous range of fast and efficient ways of creating arrays
and manipulating numerical data inside them. While a Python list can contain
different data types within a single list, all of the elements in a NumPy array
should be homogeneous. The mathematical operations that are meant to be performed
on arrays would be extremely inefficient if the arrays weren't homogeneous.

**Why use NumPy?**

NumPy arrays are faster and more compact than Python lists. An array consumes
less memory and is convenient to use. NumPy uses much less memory to store data
and it provides a mechanism of specifying the data types. This allows the code
to be optimized even further.




--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) What is an array?

(Segment 6)
#What is an array? (h1)

An array is a central data structure of the NumPy library. An array is a grid of
values and it contains information about the raw data, how to locate an element,
and how to interpret an element. It has a grid of elements that can be indexed
in :ref:`various ways <quickstart.indexing-slicing-and-iterating>`.
The elements are all of the same type, referred to as the array ``dtype``.

An array can be indexed by a tuple of nonnegative integers, by booleans, by
another array, or by integers. The ``rank`` of the array is the number of
dimensions. The ``shape`` of the array is a tuple of integers giving the size of
the array along each dimension.

One way we can initialize NumPy arrays is from Python lists, using nested lists
for two- or higher-dimensional data.

For example::

>>> a = np.array([1, 2, 3, 4, 5, 6])

or::

>>> a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

We can access the elements in the array using square brackets. When you're
accessing elements, remember that indexing in NumPy starts at 0. That means that
if you want to access the first element in your array, you'll be accessing
element "0".

::

>>> print(a[0])
[1 2 3 4]





--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) More information about arrays

(Segment 7)
#More information about arrays (h1)

*This section covers* ``1D array``, ``2D array``, ``ndarray``, ``vector``, ``matrix``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) 

(Segment 8)
# (h1)

*Image credits: Jay Alammar https://jalammar.github.io/*



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) How to create a basic array

(Segment 9)
#How to create a basic array (h1)


*This section covers* ``np.array()``, ``np.zeros()``, ``np.ones()``,
``np.empty()``, ``np.arange()``, ``np.linspace()``, ``dtype``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Adding, removing, and sorting elements

(Segment 10)
#Adding, removing, and sorting elements (h1)

*This section covers* ``np.sort()``, ``np.concatenate()``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) How do you know the shape and size of an array?

(Segment 11)
#How do you know the shape and size of an array? (h1)

*This section covers* ``ndarray.ndim``, ``ndarray.size``, ``ndarray.shape``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Can you reshape an array?

(Segment 12)
#Can you reshape an array? (h1)

*This section covers* ``arr.reshape()``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) How to convert a 1D array into a 2D array (how to add a new axis to an array)

(Segment 13)
#How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)

*This section covers* ``np.newaxis``, ``np.expand_dims``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Indexing and slicing

(Segment 14)
#Indexing and slicing (h1)

You can index and slice NumPy arrays in the same ways you can slice Python
lists. ::

>>> data = np.array([1, 2, 3])

>>> data[1]
2
>>> data[0:2]
array([1, 2])
>>> data[1:]
array([2, 3])
>>> data[-2:]
array([2, 3])

You can visualize it this way:

.. image:: images/np_indexing.png


You may want to take a section of your array or specific array elements to use
in further analysis or additional operations. To do that, you'll need to subset,
slice, and/or index your arrays.

If you want to select values from your array that fulfill certain conditions,
it's straightforward with NumPy.

For example, if you start with this array::

>>> a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

You can easily print all of the values in the array that are less than 5. ::

>>> print(a[a < 5])
[1 2 3 4]

You can also select, for example, numbers that are equal to or greater than 5,
and use that condition to index an array. ::

>>> five_up = (a >= 5)
>>> print(a[five_up])
[ 5  6  7  8  9 10 11 12]

You can select elements that are divisible by 2::

>>> divisible_by_2 = a[a%2==0]
>>> print(divisible_by_2)
[ 2  4  6  8 10 12]

Or you can select elements that satisfy two conditions using the ``&`` and ``|``
operators::

>>> c = a[(a > 2) & (a < 11)]
>>> print(c)
[ 3  4  5  6  7  8  9 10]

You can also make use of the logical operators **&** and **|** in order to
return boolean values that specify whether or not the values in an array fulfill
a certain condition. This can be useful with arrays that contain names or other
categorical values. ::

>>> five_up = (a > 5) | (a == 5)
>>> print(five_up)
[[False False False False]
[ True  True  True  True]
[ True  True  True True]]

You can also use ``np.nonzero()`` to select elements or indices from an array.

Starting with this array::

>>> a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

You can use ``np.nonzero()`` to print the indices of elements that are, for
example, less than 5::

>>> b = np.nonzero(a < 5)
>>> print(b)
(array([0, 0, 0, 0]), array([0, 1, 2, 3]))

In this example, a tuple of arrays was returned: one for each dimension. The
first array represents the row indices where these values are found, and the
second array represents the column indices where the values are found.

If you want to generate a list of coordinates where the elements exist, you can
zip the arrays, iterate over the list of coordinates, and print them. For
example::

>>> list_of_coordinates= list(zip(b[0], b[1]))

>>> for coord in list_of_coordinates:
...     print(coord)
(np.int64(0), np.int64(0))
(np.int64(0), np.int64(1))
(np.int64(0), np.int64(2))
(np.int64(0), np.int64(3))


You can also use ``np.nonzero()`` to print the elements in an array that are less
than 5 with::

>>> print(a[b])
[1 2 3 4]

If the element you're looking for doesn't exist in the array, then the returned
array of indices will be empty. For example::

>>> not_there = np.nonzero(a == 42)
>>> print(not_there)
(array([], dtype=int64), array([], dtype=int64))

Learn more about :ref:`indexing and slicing here <quickstart.indexing-slicing-and-iterating>`
and :ref:`here <basics.indexing>`.

Read more about using the nonzero function at: `nonzero`.





--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) How to create an array from existing data

(Segment 15)
#How to create an array from existing data (h1)

*This section covers* ``slicing and indexing``, ``np.vstack()``, ``np.hstack()``,
``np.hsplit()``, ``.view()``, ``copy()``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Basic array operations

(Segment 16)
#Basic array operations (h1)

*This section covers addition, subtraction, multiplication, division, and more*



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Broadcasting

(Segment 17)
#Broadcasting (h1)

There are times when you might want to carry out an operation between an array
and a single number (also called *an operation between a vector and a scalar*)
or between arrays of two different sizes. For example, your array (we'll call it
"data") might contain information about distance in miles but you want to
convert the information to kilometers. You can perform this operation with::

>>> data = np.array([1.0, 2.0])
>>> data * 1.6
array([1.6, 3.2])

.. image:: images/np_multiply_broadcasting.png

NumPy understands that the multiplication should happen with each cell. That
concept is called **broadcasting**. Broadcasting is a mechanism that allows
NumPy to perform operations on arrays of different shapes. The dimensions of
your array must be compatible, for example, when the dimensions of both arrays
are equal or when one of them is 1. If the dimensions are not compatible, you
will get a ``ValueError``.

:ref:`Learn more about broadcasting here <basics.broadcasting>`.





--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) More useful array operations

(Segment 18)
#More useful array operations (h1)

*This section covers maximum, minimum, sum, mean, product, standard deviation, and more*



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Creating matrices

(Segment 19)
#Creating matrices (h1)

You can pass Python lists of lists to create a 2-D array (or "matrix") to
represent them in NumPy. ::

>>> data = np.array([[1, 2], [3, 4], [5, 6]])
>>> data
array([[1, 2],
[3, 4],
[5, 6]])

.. image:: images/np_create_matrix.png

Indexing and slicing operations are useful when you're manipulating matrices::

>>> data[0, 1]
2
>>> data[1:3]
array([[3, 4],
[5, 6]])
>>> data[0:2, 0]
array([1, 3])

.. image:: images/np_matrix_indexing.png

You can aggregate matrices the same way you aggregated vectors::

>>> data.max()
6
>>> data.min()
1
>>> data.sum()
21

.. image:: images/np_matrix_aggregation.png

You can aggregate all the values in a matrix and you can aggregate them across
columns or rows using the ``axis`` parameter. To illustrate this point, let's
look at a slightly modified dataset::

>>> data = np.array([[1, 2], [5, 3], [4, 6]])
>>> data
array([[1, 2],
[5, 3],
[4, 6]])
>>> data.max(axis=0)
array([5, 6])
>>> data.max(axis=1)
array([2, 5, 6])

.. image:: images/np_matrix_aggregation_row.png

Once you've created your matrices, you can add and multiply them using
arithmetic operators if you have two matrices that are the same size. ::

>>> data = np.array([[1, 2], [3, 4]])
>>> ones = np.array([[1, 1], [1, 1]])
>>> data + ones
array([[2, 3],
[4, 5]])

.. image:: images/np_matrix_arithmetic.png

You can do these arithmetic operations on matrices of different sizes, but only
if one matrix has only one column or one row. In this case, NumPy will use its
broadcast rules for the operation. ::

>>> data = np.array([[1, 2], [3, 4], [5, 6]])
>>> ones_row = np.array([[1, 1]])
>>> data + ones_row
array([[2, 3],
[4, 5],
[6, 7]])

.. image:: images/np_matrix_broadcasting.png

Be aware that when NumPy prints N-dimensional arrays, the last axis is looped
over the fastest while the first axis is the slowest. For instance::

>>> np.ones((4, 3, 2))
array([[[1., 1.],
[1., 1.],
[1., 1.]],
<BLANKLINE>
[[1., 1.],
[1., 1.],
[1., 1.]],
<BLANKLINE>
[[1., 1.],
[1., 1.],
[1., 1.]],
<BLANKLINE>
[[1., 1.],
[1., 1.],
[1., 1.]]])

There are often instances where we want NumPy to initialize the values of an
array. NumPy offers functions like ``ones()`` and ``zeros()``, and the
``random.Generator`` class for random number generation for that.
All you need to do is pass in the number of elements you want it to generate::

>>> np.ones(3)
array([1., 1., 1.])
>>> np.zeros(3)
array([0., 0., 0.])
>>> rng = np.random.default_rng()  # the simplest way to generate random numbers
>>> rng.random(3) #doctest: +SKIP
array([0.63696169, 0.26978671, 0.04097352])

.. image:: images/np_ones_zeros_random.png

You can also use ``ones()``, ``zeros()``, and ``random()`` to create
a 2D array if you give them a tuple describing the dimensions of the matrix::

>>> np.ones((3, 2))
array([[1., 1.],
[1., 1.],
[1., 1.]])
>>> np.zeros((3, 2))
array([[0., 0.],
[0., 0.],
[0., 0.]])
>>> rng.random((3, 2)) #doctest: +SKIP
array([[0.01652764, 0.81327024],
[0.91275558, 0.60663578],
[0.72949656, 0.54362499]])  # may vary

.. image:: images/np_ones_zeros_matrix.png

Read more about creating arrays, filled with ``0``'s, ``1``'s, other values or
uninitialized, at :ref:`array creation routines <routines.array-creation>`.





--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Generating random numbers

(Segment 20)
#Generating random numbers (h1)

The use of random number generation is an important part of the configuration
and evaluation of many numerical and machine learning algorithms. Whether you
need to randomly initialize weights in an artificial neural network, split data
into random sets, or randomly shuffle your dataset, being able to generate
random numbers (actually, repeatable pseudo-random numbers) is essential.

With ``Generator.integers``, you can generate random integers from low (remember
that this is inclusive with NumPy) to high (exclusive). You can set
``endpoint=True`` to make the high number inclusive.

You can generate a 2 x 4 array of random integers between 0 and 4 with::

>>> rng.integers(5, size=(2, 4)) #doctest: +SKIP
array([[2, 1, 1, 0],
[0, 0, 0, 4]])  # may vary

:ref:`Read more about random number generation here <numpyrandom>`.





--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) How to get unique items and counts

(Segment 21)
#How to get unique items and counts (h1)

*This section covers* ``np.unique()``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Transposing and reshaping a matrix

(Segment 22)
#Transposing and reshaping a matrix (h1)

*This section covers* ``arr.reshape()``, ``arr.transpose()``, ``arr.T``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) How to reverse an array

(Segment 23)
#How to reverse an array (h1)

*This section covers* ``np.flip()``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Reshaping and flattening multidimensional arrays

(Segment 24)
#Reshaping and flattening multidimensional arrays (h1)

*This section covers* ``.flatten()``, ``ravel()``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) How to access the docstring for more information

(Segment 25)
#How to access the docstring for more information (h1)

*This section covers* ``help()``, ``?``, ``??``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Parameters

(Segment 26)
#Parameters (h1)
(for the __new__ method; see Notes below)

shape : tuple of ints
Shape of created array.
...

This also works for functions and other objects that **you** create. Just
remember to include a docstring with your function using a string literal
(``""" """`` or ``''' '''`` around your documentation).

For example, if you create this function::

>>> def double(a):
...   '''Return a * 2'''
...   return a * 2

You can obtain information about the function:

.. code-block:: ipython

In [2]: double?
Signature: double(a)
Docstring: Return a * 2
File:      ~/Desktop/<ipython-input-23-b5adf20be596>
Type:      function

You can reach another level of information by reading the source code of the
object you're interested in. Using a double question mark (``??``) allows you to
access the source code.

For example:

.. code-block:: ipython

In [3]: double??
Signature: double(a)
Source:
def double(a):
'''Return a * 2'''
return a * 2
File:      ~/Desktop/<ipython-input-23-b5adf20be596>
Type:      function

If the object in question is compiled in a language other than Python, using
``??`` will return the same information as ``?``. You'll find this with a lot of
built-in objects and types, for example:

.. code-block:: ipython

In [4]: len?
Signature: len(obj, /)
Docstring: Return the number of items in a container.
Type:      builtin_function_or_method

and :

.. code-block:: ipython

In [5]: len??
Signature: len(obj, /)
Docstring: Return the number of items in a container.
Type:      builtin_function_or_method

have the same output because they were compiled in a programming language other
than Python.





--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Working with mathematical formulas

(Segment 27)
#Working with mathematical formulas (h1)

The ease of implementing mathematical formulas that work on arrays is one of
the things that make NumPy so widely used in the scientific Python community.

For example, this is the mean square error formula (a central formula used in
supervised machine learning models that deal with regression):

.. image:: images/np_MSE_formula.png

Implementing this formula is simple and straightforward in NumPy:

.. image:: images/np_MSE_implementation.png

What makes this work so well is that ``predictions`` and ``labels`` can contain
one or a thousand values. They only need to be the same size.

You can visualize it this way:

.. image:: images/np_mse_viz1.png

In this example, both the predictions and labels vectors contain three values,
meaning ``n`` has a value of three. After we carry out subtractions the values
in the vector are squared. Then NumPy sums the values, and your result is the
error value for that prediction and a score for the quality of the model.

.. image:: images/np_mse_viz2.png

.. image:: images/np_MSE_explanation2.png





--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) How to save and load NumPy objects

(Segment 28)
#How to save and load NumPy objects (h1)

*This section covers* ``np.save``, ``np.savez``, ``np.savetxt``,
``np.load``, ``np.loadtxt``



--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Importing and exporting a CSV

(Segment 29)
#Importing and exporting a CSV (h1)


>>> with open('music.csv', 'w') as fid:
...     n = fid.write('Artist,Genre,Listeners,Plays\n')
...     n = fid.write('Billie Holiday,Jazz,1300000,27000000\n')
...     n = fid.write('Jimmie Hendrix,Rock,2700000,70000000\n')
...     n = fid.write('Miles Davis,Jazz,1500000,48000000\n')
...     n = fid.write('SIA,Pop,2000000,74000000\n')



It's simple to read in a CSV that contains existing information. The best and
easiest way to do this is to use
`Pandas <https://pandas.pydata.org>`_. ::

>>> import pandas as pd

>>> # If all of your columns are the same type:
>>> x = pd.read_csv('music.csv', header=0).values
>>> print(x)
[['Billie Holiday' 'Jazz' 1300000 27000000]
['Jimmie Hendrix' 'Rock' 2700000 70000000]
['Miles Davis' 'Jazz' 1500000 48000000]
['SIA' 'Pop' 2000000 74000000]]

>>> # You can also simply select the columns you need:
>>> x = pd.read_csv('music.csv', usecols=['Artist', 'Plays']).values
>>> print(x)
[['Billie Holiday' 27000000]
['Jimmie Hendrix' 70000000]
['Miles Davis' 48000000]
['SIA' 74000000]]

.. image:: images/np_pandas.png

It's simple to use Pandas in order to export your array as well. If you are new
to NumPy, you may want to  create a Pandas dataframe from the values in your
array and then write the data frame to a CSV file with Pandas.

If you created this array "a" ::

>>> a = np.array([[-2.58289208,  0.43014843, -1.24082018, 1.59572603],
...               [ 0.99027828, 1.17150989,  0.94125714, -0.14692469],
...               [ 0.76989341,  0.81299683, -0.95068423, 0.11769564],
...               [ 0.20484034,  0.34784527,  1.96979195, 0.51992837]])

The continuous integration truncates dataframe display without this setting.
>>> pd.set_option('display.max_columns', 10)

You could create a Pandas dataframe ::

>>> df = pd.DataFrame(a)
>>> print(df)
0         1         2         3
0 -2.582892  0.430148 -1.240820  1.595726
1  0.990278  1.171510  0.941257 -0.146925
2  0.769893  0.812997 -0.950684  0.117696
3  0.204840  0.347845  1.969792  0.519928

You can easily save your dataframe with::

>>> df.to_csv('pd.csv')

And read your CSV with::

>>> data = pd.read_csv('pd.csv')

.. image:: images/np_readcsv.png

You can also save your array with the NumPy ``savetxt`` method. ::

>>> np.savetxt('np.csv', a, fmt='%.2f', delimiter=',', header='1,  2,  3,  4')

If you're using the command line, you can read your saved CSV any time with a
command such as::

$ cat np.csv
#  1,  2,  3,  4
-2.58,0.43,-1.24,1.60
0.99,1.17,0.94,-0.15
0.77,0.81,-0.95,0.12
0.20,0.35,1.97,0.52

Or you can open the file any time with a text editor!

If you're interested in learning more about Pandas, take a look at the
`official Pandas documentation <https://pandas.pydata.org/index.html>`_.
Learn how to install Pandas with the
`official Pandas installation information <https://pandas.pydata.org/pandas-docs/stable/install.html>`_.





--------------------------------------------------------------------------------
(Table of Contents)
Welcome to NumPy! (h1)
Installing NumPy (h1)
How to import NumPy (h1)
Reading the example code (h1)
What’s the difference between a Python list and a NumPy array? (h1)
What is an array? (h1)
More information about arrays (h1)
 (h1)
How to create a basic array (h1)
Adding, removing, and sorting elements (h1)
How do you know the shape and size of an array? (h1)
Can you reshape an array? (h1)
How to convert a 1D array into a 2D array (how to add a new axis to an array) (h1)
Indexing and slicing (h1)
How to create an array from existing data (h1)
Basic array operations (h1)
Broadcasting (h1)
More useful array operations (h1)
Creating matrices (h1)
Generating random numbers (h1)
How to get unique items and counts (h1)
Transposing and reshaping a matrix (h1)
How to reverse an array (h1)
Reshaping and flattening multidimensional arrays (h1)
How to access the docstring for more information (h1)
Parameters (h1)
Working with mathematical formulas (h1)
How to save and load NumPy objects (h1)
Importing and exporting a CSV (h1)
Plotting arrays with Matplotlib (h1)


(Page path)
(h1) Plotting arrays with Matplotlib

(Segment 30)
#Plotting arrays with Matplotlib (h1)

If you need to generate a plot for your values, it's very simple with
`Matplotlib <https://matplotlib.org/>`_.

For example, you may have an array like this one::

>>> a = np.array([2, 1, 5, 7, 4, 6, 8, 14, 10, 9, 18, 20, 22])

If you already have Matplotlib installed, you can import it with::

>>> import matplotlib.pyplot as plt

# If you're using Jupyter Notebook, you may also want to run the following
# line of code to display your code in the notebook:

%matplotlib inline

All you need to do to plot your values is run::

>>> plt.plot(a)

# If you are running from a command line, you may need to do this:
# >>> plt.show()

.. plot:: user/plots/matplotlib1.py
:align: center
:include-source: 0

For example, you can plot a 1D array like this::

>>> x = np.linspace(0, 5, 20)
>>> y = np.linspace(0, 10, 20)
>>> plt.plot(x, y, 'purple') # line
>>> plt.plot(x, y, 'o')      # dots

.. plot:: user/plots/matplotlib2.py
:align: center
:include-source: 0

With Matplotlib, you have access to an enormous number of visualization options. ::

>>> fig = plt.figure()
>>> ax = fig.add_subplot(projection='3d')
>>> X = np.arange(-5, 5, 0.15)
>>> Y = np.arange(-5, 5, 0.15)
>>> X, Y = np.meshgrid(X, Y)
>>> R = np.sqrt(X**2 + Y**2)
>>> Z = np.sin(R)

>>> ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='viridis')

.. plot:: user/plots/matplotlib3.py
:align: center
:include-source: 0


To read more about Matplotlib and what it can do, take a look at
`the official documentation <https://matplotlib.org/>`_.
For directions regarding installing Matplotlib, see the official
`installation section <https://matplotlib.org/users/installing.html>`_.




--------------------------------------------------------------------------------
