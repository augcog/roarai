(Table of Contents)
The ``@`` operator (h1)
Decompositions (h1)
Matrix eigenvalues (h1)
Norms and other numbers (h1)
Solving equations and inverting matrices (h1)
Exceptions (h1)
Linear algebra on several matrices at once (h1)


(Page path)
(h1) The ``@`` operator

(Segment 1)
#The ``@`` operator (h1)

Introduced in NumPy 1.10.0, the ``@`` operator is preferable to
other methods when computing the matrix product between 2d arrays. The
:func:`numpy.matmul` function implements the ``@`` operator.

.. currentmodule:: numpy

Matrix and vector products
--------------------------

.. autosummary::
:toctree: generated/

dot
linalg.multi_dot
vdot
inner
outer
matmul
tensordot
einsum
einsum_path
linalg.matrix_power
kron




--------------------------------------------------------------------------------
(Table of Contents)
The ``@`` operator (h1)
Decompositions (h1)
Matrix eigenvalues (h1)
Norms and other numbers (h1)
Solving equations and inverting matrices (h1)
Exceptions (h1)
Linear algebra on several matrices at once (h1)


(Page path)
(h1) Decompositions

(Segment 2)
#Decompositions (h1)
.. autosummary::
:toctree: generated/

linalg.cholesky
linalg.qr
linalg.svd




--------------------------------------------------------------------------------
(Table of Contents)
The ``@`` operator (h1)
Decompositions (h1)
Matrix eigenvalues (h1)
Norms and other numbers (h1)
Solving equations and inverting matrices (h1)
Exceptions (h1)
Linear algebra on several matrices at once (h1)


(Page path)
(h1) Matrix eigenvalues

(Segment 3)
#Matrix eigenvalues (h1)
.. autosummary::
:toctree: generated/

linalg.eig
linalg.eigh
linalg.eigvals
linalg.eigvalsh




--------------------------------------------------------------------------------
(Table of Contents)
The ``@`` operator (h1)
Decompositions (h1)
Matrix eigenvalues (h1)
Norms and other numbers (h1)
Solving equations and inverting matrices (h1)
Exceptions (h1)
Linear algebra on several matrices at once (h1)


(Page path)
(h1) Norms and other numbers

(Segment 4)
#Norms and other numbers (h1)
.. autosummary::
:toctree: generated/

linalg.norm
linalg.cond
linalg.det
linalg.matrix_rank
linalg.slogdet
trace




--------------------------------------------------------------------------------
(Table of Contents)
The ``@`` operator (h1)
Decompositions (h1)
Matrix eigenvalues (h1)
Norms and other numbers (h1)
Solving equations and inverting matrices (h1)
Exceptions (h1)
Linear algebra on several matrices at once (h1)


(Page path)
(h1) Solving equations and inverting matrices

(Segment 5)
#Solving equations and inverting matrices (h1)
.. autosummary::
:toctree: generated/

linalg.solve
linalg.tensorsolve
linalg.lstsq
linalg.inv
linalg.pinv
linalg.tensorinv




--------------------------------------------------------------------------------
(Table of Contents)
The ``@`` operator (h1)
Decompositions (h1)
Matrix eigenvalues (h1)
Norms and other numbers (h1)
Solving equations and inverting matrices (h1)
Exceptions (h1)
Linear algebra on several matrices at once (h1)


(Page path)
(h1) Exceptions

(Segment 6)
#Exceptions (h1)
.. autosummary::
:toctree: generated/

linalg.LinAlgError





--------------------------------------------------------------------------------
(Table of Contents)
The ``@`` operator (h1)
Decompositions (h1)
Matrix eigenvalues (h1)
Norms and other numbers (h1)
Solving equations and inverting matrices (h1)
Exceptions (h1)
Linear algebra on several matrices at once (h1)


(Page path)
(h1) Linear algebra on several matrices at once

(Segment 7)
#Linear algebra on several matrices at once (h1)

.. versionadded:: 1.8.0

Several of the linear algebra routines listed above are able to
compute results for several matrices at once, if they are stacked into
the same array.

This is indicated in the documentation via input parameter
specifications such as ``a : (..., M, M) array_like``. This means that
if for instance given an input array ``a.shape == (N, M, M)``, it is
interpreted as a "stack" of N matrices, each of size M-by-M. Similar
specification applies to return values, for instance the determinant
has ``det : (...)`` and will in this case return an array of shape
``det(a).shape == (N,)``. This generalizes to linear algebra
operations on higher-dimensional arrays: the last 1 or 2 dimensions of
a multidimensional array are interpreted as vectors or matrices, as
appropriate for each operation.



--------------------------------------------------------------------------------
