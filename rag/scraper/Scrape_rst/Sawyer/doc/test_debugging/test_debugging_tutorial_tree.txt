(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) Getting Started

(Segment 1)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##Getting Started (h2)
If you haven't already done so, make sure you've completed the steps in `Getting Started <../getting_started/getting_started.html>`_.




--------------------------------------------------------------------------------
(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) CI Failures

(Segment 2)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##CI Failures (h2)

Our CI runs on Github Actions and uses scripts found in `industrial_ci <https://github.com/ros-industrial/industrial_ci.git>`_.  These tests build and run various tests in various environments.  Often something that works locally won't work in CI in a different environment.  To troubleshoot a failure from CI it is useful to use docker to run in the same environment.

For troubleshooting a specific test it is helpful to inspect the GHA logs to understand what environment variables are being set in your test.




--------------------------------------------------------------------------------
(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) Launch Docker Environment

(Segment 3)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##Launch Docker Environment (h2)

To start docker container::

docker run -it moveit/moveit:noetic-ci /bin/bash




--------------------------------------------------------------------------------
(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) Setup Environment

(Segment 4)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##Setup Environment (h2)

The first thing you should do is update debians and install tools you'll need for debugging.  The update is important because that is what we do in CI::

apt-get update
apt-get dist-upgrade
apt-get install -y python-catkin-tools ssh git gdb valgrind vim

Next create the folder structure for your ROS environment::

CATKIN_WS=/root/ros_ws
mkdir -p ${CATKIN_WS}/src
cd ${CATKIN_WS}/src




--------------------------------------------------------------------------------
(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) Checkout Code

(Segment 5)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##Checkout Code (h2)

In this step we use git and wstool to get the code we will be testing.  You'll replace the remote and branch with yours if you are debugging a PR.  Note that on the wstool update step we'll need to skip replacing moveit if we are testing a specific branch from a PR::

cd ${CATKIN_WS}/src
wstool init .
git clone https://github.com/ros-planning/moveit.git -b master
wstool merge -t . moveit/moveit.rosinstall
wstool update




--------------------------------------------------------------------------------
(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) Install Dependencies

(Segment 6)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##Install Dependencies (h2)

Here we install debian dependencies with rosdep::

cd ${CATKIN_WS}/src
rosdep install -y -q -n --from-paths . --ignore-src --rosdistro ${ROS_DISTRO}




--------------------------------------------------------------------------------
(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) Configure and Build

(Segment 7)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##Configure and Build (h2)

Now we configure and build our workspace.  Note that we set extra CXXFLAGS to be the same as the ones used by moveit_ci::

cd $CATKIN_WS
export CXXFLAGS="-Wall -Wextra -Wwrite-strings -Wunreachable-code -Wpointer-arith -Wredundant-decls"
catkin config --extend /opt/ros/${ROS_DISTRO} --no-install --cmake-args -DCMAKE_BUILD_TYPE=Debug
catkin build --summarize




--------------------------------------------------------------------------------
(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) Build the Tests

(Segment 8)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##Build the Tests (h2)

Here is the command to build the tests in the workspace::

cd ${CATKIN_WS}
catkin build --summarize --make-args tests




--------------------------------------------------------------------------------
(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) Run the Tests

(Segment 9)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##Run the Tests (h2)

To run all the tests we can use the run_tests cmake arg.  Here we should specify a specific package we want to test as that will speed up this run::

catkin build --summarize --catkin-make-args run_tests -- moveit_ros_planning_interface




--------------------------------------------------------------------------------
(Table of Contents)
Debugging Tests (h1)
--Getting Started (h2)
--CI Failures (h2)
--Launch Docker Environment (h2)
--Setup Environment (h2)
--Checkout Code (h2)
--Install Dependencies (h2)
--Configure and Build (h2)
--Build the Tests (h2)
--Run the Tests (h2)
--Run One Test (h2)


(Page path)
(h1) Debugging Tests > (h2) Run One Test

(Segment 10)
#Debugging Tests (h1)

How to debug when a test is failing.

**Note:** *This is not meant as an exhaustive tutorial on software testing, instead this focuses on methods that will help you debug tests in MoveIt or similar ROS projects.*


##Run One Test (h2)

You can also use rostest to run a specific test.  The text argument sends output to the console instead of an xml output file.  To do this you'll have to source the devel workspace::

cd ${CATKIN_WS}
source devel/setup.bash
rostest moveit_ros_planning_interface move_group_pick_place_test.test --text



--------------------------------------------------------------------------------
