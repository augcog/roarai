Parsed Headers, Levels and Contents:
h1: [Manipulation](#manipulation "#manipulation")
Contents:

**NOTE**:

* This instructions were tested on `Ubuntu 16.04` and `ROS Kinetic Kame`.
* If you want more specfic information about OpenMANIPULATOR-X, please refer to the [OpenMANIPULATOR-X e-Manual](/docs/en/platform/openmanipulator/ "/docs/en/platform/openmanipulator/").

**WARNING**

`Raspberry Pi 4` and `Jetson Nano` do not support Kinetic. Please select other ROS or ROS2 distributions based on supported Ubuntu versions.

The contents in e-Manual are subject to be updated without a prior notice. Therefore, some video may differ from the contents in e-Manual.

**TIP**: The terminal application can be found with the Ubuntu search icon on the top left corner of the screen. The shortcut key for running the terminal is `Ctrl`-`Alt`-`T`.

**NOTE**:

* This instructions were tested on `Ubuntu 18.04` and `ROS Melodic Morenia`.
* If you want more specfic information about OpenMANIPULATOR-X, please refer to the [OpenMANIPULATOR-X e-Manual](/docs/en/platform/openmanipulator/ "/docs/en/platform/openmanipulator/").

The contents in e-Manual are subject to be updated without a prior notice. Therefore, some video may differ from the contents in e-Manual.

**TIP**: The terminal application can be found with the Ubuntu search icon on the top left corner of the screen. The shortcut key for running the terminal is `Ctrl`-`Alt`-`T`.

**NOTE**:

* This instructions were tested on `Ubuntu 20.04` and `ROS Noetic Ninjemys`.
* If you want more specfic information about OpenMANIPULATOR-X, please refer to the [OpenMANIPULATOR-X e-Manual](/docs/en/platform/openmanipulator/ "/docs/en/platform/openmanipulator/").

The contents in e-Manual are subject to be updated without a prior notice. Therefore, some video may differ from the contents in e-Manual.

**TIP**: The terminal application can be found with the Ubuntu search icon on the top left corner of the screen. The shortcut key for running the terminal is `Ctrl`-`Alt`-`T`.

**NOTE**:

* This instructions were tested on `Ubuntu 18.04` and `ROS2 Dashing Diademata`.
* More information on OpenMANIPULATOR-X is availabe at [OpenMANIPULATOR-X e-Manual](/docs/en/platform/openmanipulator_x/overview/ "/docs/en/platform/openmanipulator_x/overview/").

The contents in e-Manual are subject to change without prior notice. Therefore, some video may differ from the contents in e-Manual.

**TIP**: The terminal application can be found with the Ubuntu search icon on the top left corner of the screen.  

The shortcut key for opening the terminal is `Ctrl`-`Alt`-`T`.

**NOTE**:

* This instructions were tested on `Ubuntu 20.04` and `ROS2 Foxy Fitzroy`.
* More information on OpenMANIPULATOR-X is availabe at [OpenMANIPULATOR-X e-Manual](/docs/en/platform/openmanipulator_x/overview/ "/docs/en/platform/openmanipulator_x/overview/").

The contents in e-Manual are subject to change without prior notice. Therefore, some video may differ from the contents in e-Manual.

**TIP**: The terminal application can be found with the Ubuntu search icon on the top left corner of the screen.  

The shortcut key for opening the terminal is `Ctrl`-`Alt`-`T`.

**NOTE**:

* This instructions were tested on `Ubuntu 22.04` and `ROS2 Humble Hawksbill`.
* More information on OpenMANIPULATOR-X is availabe at [OpenMANIPULATOR-X e-Manual](/docs/en/platform/openmanipulator_x/overview/ "/docs/en/platform/openmanipulator_x/overview/").

The contents in e-Manual are subject to change without prior notice. Therefore, some video may differ from the contents in e-Manual.

**TIP**: The terminal application can be found with the Ubuntu search icon on the top left corner of the screen.  

The shortcut key for opening the terminal is `Ctrl`-`Alt`-`T`.

**NOTE**: This feature in the selected ROS distribution is not available yet.


=====================================

h2: [TurtleBot3 with OpenMANIPULATOR](#turtlebot3-with-openmanipulator "#turtlebot3-with-openmanipulator")
Contents:

![](/assets/images/platform/turtlebot3/manipulation/tb3_with_opm_logo.png)

The OpenMANIPULATOR-X by ROBOTIS is one of the manipulators that support ROS, and has the advantage of being able to easily manufacture at a low cost by using DYNAMIXEL actuators with 3D printed parts.

The OpenMANIPULATOR-X has the advantage of being compatible with TurtleBot3 Waffle and Waffle Pi. Through this compatibility can compensate for the lack of freedom and can have greater completeness as a service robot with the the SLAM and Navigation capabilities that the TurtleBot3 has. TurtleBot3 and OpenMANIPULATOR-X can be used as a `mobile manipulator` and can do things like the following videos.

The contents in e-Manual are subject to change without prior notice. Therefore, some video may differ from the contents in e-Manual.

![](/assets/images/platform/turtlebot3/manipulation/tb3_with_opm_logo.png)

The OpenMANIPULATOR-X by ROBOTIS is one of the manipulators that support ROS, and has the advantage of being able to easily manufacture at a low cost by using DYNAMIXEL actuators with 3D printed parts.

The OpenMANIPULATOR-X has the advantage of being compatible with TurtleBot3 Waffle and Waffle Pi. Through this compatibility can compensate for the lack of freedom and can have greater completeness as a service robot with the the SLAM and Navigation capabilities that the TurtleBot3 has. TurtleBot3 and OpenMANIPULATOR-X can be used as a `mobile manipulator` and can do things like the following videos.

The contents in e-Manual are subject to change without prior notice. Therefore, some video may differ from the contents in e-Manual.

![](/assets/images/platform/turtlebot3/manipulation/tb3_with_opm_logo.png)

The OpenMANIPULATOR-X by ROBOTIS is one of the manipulators that support ROS, and has the advantage of being able to easily manufacture at a low cost by using DYNAMIXEL actuators with 3D printed parts.

The OpenMANIPULATOR-X has the advantage of being compatible with TurtleBot3 Waffle and Waffle Pi. Through this compatibility can compensate for the lack of freedom and can have greater completeness as a service robot with the the SLAM and Navigation capabilities that the TurtleBot3 has. TurtleBot3 and OpenMANIPULATOR-X can be used as a `mobile manipulator` and can do things like the following videos.

The contents in e-Manual are subject to be updated without a prior notice. Therefore, some video may differ from the contents in e-Manual.

![](/assets/images/platform/turtlebot3/manipulation/tb3_with_opm_logo.png)

The OpenMANIPULATOR-X by ROBOTIS is one of the manipulators that support ROS platform, and has the advantage of being able to easily manufacture at a low cost by using DYNAMIXEL actuators with 3D printed parts.
The OpenMANIPULATOR-X has the advantage of being compatible with TurtleBot3 Waffle and Waffle Pi. Through this compatibility can compensate for the lack of freedom and can have greater completeness as a service robot with the the SLAM and Navigation capabilities that the TurtleBot3 has. TurtleBot3 and OpenMANIPULATOR-X can be used as a `mobile manipulator` and can do things like the following videos.
fds

The contents in e-Manual are subject to change without prior notice. Therefore, some video may differ from the contents in e-Manual.

![](/assets/images/platform/turtlebot3/manipulation/tb3_with_opm_logo.png)

The OpenMANIPULATOR-X by ROBOTIS is one of the manipulators that support ROS platform, and has the advantage of being able to easily manufacture at a low cost by using DYNAMIXEL actuators with 3D printed parts.
The OpenMANIPULATOR-X has the advantage of being compatible with TurtleBot3 Waffle and Waffle Pi. Through this compatibility can compensate for the lack of freedom and can have greater completeness as a service robot with the the SLAM and Navigation capabilities that the TurtleBot3 has. TurtleBot3 and OpenMANIPULATOR-X can be used as a `mobile manipulator` and can do things like the following videos.
fds

The contents in e-Manual are subject to change without prior notice. Therefore, some video may differ from the contents in e-Manual.

![](/assets/images/platform/turtlebot3/manipulation/tb3_with_opm_logo.png)

The OpenMANIPULATOR-X by ROBOTIS is one of the manipulators that support ROS platform, and has the advantage of being able to easily manufacture at a low cost by using DYNAMIXEL actuators with 3D printed parts.
The OpenMANIPULATOR-X has the advantage of being compatible with TurtleBot3 Waffle and Waffle Pi. Through this compatibility can compensate for the lack of freedom and can have greater completeness as a service robot with the the SLAM and Navigation capabilities that the TurtleBot3 has. TurtleBot3 and OpenMANIPULATOR-X can be used as a `mobile manipulator` and can do things like the following videos.
fds

The contents in e-Manual are subject to change without prior notice. Therefore, some video may differ from the contents in e-Manual.

**NOTE**: This feature in the selected ROS distribution is not available yet.


=====================================

h2: [Software Setup](#software-setup "#software-setup")
Contents:

**NOTE**: Before installing the `open_manipulator_with_tb3` package, install `turtlebot3` and `open_manipulator` packages on the Remote PC.

1. **[Remote PC]** Download and build the package using the following commands in order to use assembled OpenMANIPULATOR-X.

```
$ cd ~/catkin_ws/src/
$ git clone https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git
$ git clone https://github.com/ROBOTIS-GIT/turtlebot3_manipulation_simulations.git
$ git clone https://github.com/ROBOTIS-GIT/open_manipulator_dependencies.git
$ sudo apt install ros-kinetic-ros-control\* && ros-kinetic-control\* && ros-kinetic-moveit\*
$ cd ~/catkin_ws && catkin_make

```

**NOTE**: Before installing the `open_manipulator_with_tb3` package, install `turtlebot3` and `open_manipulator` packages on the Remote PC.

1. **[Remote PC]** Download and build the package using the following commands in order to use assembled OpenMANIPULATOR-X.

```
$ cd ~/catkin_ws/src/
$ git clone https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git
$ git clone https://github.com/ROBOTIS-GIT/turtlebot3_manipulation_simulations.git
$ git clone https://github.com/ROBOTIS-GIT/open_manipulator_dependencies.git
$ sudo apt install ros-melodic-ros-control\* && ros-melodic-control\* && ros-melodic-moveit\*
$ cd ~/catkin_ws && catkin_make

```

**NOTE**: Before installing the `open_manipulator_with_tb3` package, install `turtlebot3` and `open_manipulator` packages on the Remote PC.

1. **[Remote PC]** Download and build the package using the following commands in order to use assembled OpenMANIPULATOR-X.

```
$ cd ~/catkin_ws/src/
$ git clone https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git
$ git clone https://github.com/ROBOTIS-GIT/turtlebot3_manipulation_simulations.git
$ git clone https://github.com/ROBOTIS-GIT/open_manipulator_dependencies.git
$ sudo apt install ros-noetic-ros-control\* ros-noetic-control\* ros-noetic-moveit\*
$ cd ~/catkin_ws && catkin_make

```

**NOTE**: Be sure to install `turtlebot3` and `open_manipulator` packages, before installation of `open_manipulator_with_tb3` packages.

* Install dependent packages for the OpenMANIPULATOR with TurtleBot3.

**[TurtleBot3]**

1. Open a terminal on **TurtleBot3**.
2. Install dependent packages using the following commands.

```
  $ cd ~/turtlebot3_ws/src/
  $ git clone -b ros2 https://github.com/ROBOTIS-GIT/open_manipulator_with_tb3.git
  $ cd ~/turtlebot3_ws && colcon build --symlink-install

```

**[Remote PC]**

1. Open a terminal on **Remote PC**.
2. Install dependent packages using the following commands.

```
  $ cd ~/robotis_ws/src/
  $ git clone -b ros2 https://github.com/ROBOTIS-GIT/open_manipulator_with_tb3.git
  $ cd ~/robotis_ws && colcon build --symlink-install

```

	* If `colcon build` command is complete without any errors, go to the step 3.
3. Load TurtleBot3 Waffle (or Waffle Pi) with OpenMANIPULATOR on RViz.
	* Open a terminal on **Remote PC**.
	* Execute RViz using the following command.

	```
	$ ros2 launch turtlebot3_manipulation_description turtlebot3_manipulation_rviz.launch.py

	```

	![](/assets/images/platform/turtlebot3/manipulation/TurtleBot3_with_Open_Manipulator.png)

**NOTE**: TurtleBot3 Manipulation for ROS2 Foxy requires `turtlebot3_manipulation` package.  

Follow the instructions below to install the required package and its dependencies.

**[TurtleBot3]**

1. Connect to the Raspberry Pi of the **TurtleBot3** using ssh command below.

```
  $ ssh ubuntu@{IP_ADDRESS_OF_TURTLEBOT3}

```
2. Install packages for TurtleBot3 Manipulation.

```
  $ cd ~/turtlebot3_ws/src/
  $ git clone -b foxy-devel https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git
  $ cd ~/turtlebot3_ws && colcon build --symlink-install

```

**[Remote PC]**

1. Open a terminal on **Remote PC**.
2. Install dependent packages using the following commands.

```
  $ sudo apt install ros-foxy-dynamixel-sdk ros-foxy-ros2-control ros-foxy-ros2-controllers ros-foxy-gripper-controllers ros-foxy-moveit
  $ cd ~/turtlebot3_ws/src/
  $ git clone -b foxy-devel https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git
  $ cd ~/turtlebot3_ws && colcon build --symlink-install

```

**NOTE**: TurtleBot3 Manipulation for ROS2 Humble requires `turtlebot3_manipulation` package.  

Follow the instructions below to install the required package and its dependencies.

**[TurtleBot3]**

1. Connect to the Raspberry Pi of the **TurtleBot3** using ssh command below.

```
  $ ssh ubuntu@{IP_ADDRESS_OF_TURTLEBOT3}

```
2. Install packages for TurtleBot3 Manipulation.

```
  $ cd ~/turtlebot3_ws/src/
  $ git clone -b humble-devel https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git
  $ cd ~/turtlebot3_ws && colcon build --symlink-install

```

**[Remote PC]**

1. Open a terminal on **Remote PC**.
2. Install dependent packages using the following commands.

```
  $ sudo apt install ros-humble-dynamixel-sdk ros-humble-ros2-control ros-humble-ros2-controllers ros-humble-gripper-controllers ros-humble-moveit
  $ cd ~/turtlebot3_ws/src/
  $ git clone -b humble-devel https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git
  $ cd ~/turtlebot3_ws && colcon build --symlink-install

```

**NOTE**: This feature in the selected ROS distribution is not available yet.


=====================================

h2: [Hardware Assembly](#hardware-assembly "#hardware-assembly")
Contents:

* [CAD files](http://www.robotis.com/service/download.php?no=767 "http://www.robotis.com/service/download.php?no=767") (TurtleBot3 Waffle Pi + OpenMANIPULATOR)

![](/assets/images/platform/turtlebot3/manipulation/hardware_setup.png)

1. Remove the `LDS-01` or `LDS-02` LiDAR sensor and install it in the front of TurtleBot3.  

Red circles represent recommended bolt holes.
2. Install the `OpenMANIPULATOR-X` on the TurtleBot3.  

Yellow circles represent recommended bolt holes.

![](/assets/images/platform/turtlebot3/manipulation/assemble_points.png)

![](/assets/images/platform/turtlebot3/manipulation/assemble.png)


=====================================

h2: [OpenCR Setup](#opencr-setup "#opencr-setup")
Contents:

**NOTE**: To use OpenMANIPULATOR-X, you need to upload a firmware into OpenCR by using either **shell script** or **Arduino IDE**.

1. **[Shell script](#shell-script "#shell-script")** is highly recommended to upload the firmware as it uses a pre-built binary file
2. **[Arduino IDE](#arduino-ide "#arduino-ide")** builds from the provided source code and uploads the generated binary file.  

The OpenCR Arduino board manager does not support ARM based processors such as Raspberry Pi or Jetson Nano.

**WARNING**  

Please connect all DYNAMIXEL modules to the OpenCR before uploading the OpenCR firmware.

After OpenMANIPULATOR is properly mounted on TurtleBot3, the OpenCR firmware needs to be updated to control connected DYNAMIXEL. Please follow the firmware update instructions below.

1. **[TurtleBot3 SBC]** Download the OpenCR firmware file on Raspberry Pi (SBC) and upload the correct firmware with the following commands.

```
$ export OPENCR\_PORT=/dev/ttyACM0
$ export OPENCR\_MODEL=om_with_tb3
$ rm -rf ./opencr_update.tar.bz2
$ wget https://github.com/ROBOTIS-GIT/OpenCR-Binaries/raw/master/turtlebot3/ROS1/latest/opencr_update.tar.bz2
$ tar -xvf opencr_update.tar.bz2
$ cd ./opencr_update
$ ./update.sh $OPENCR\_PORT $OPENCR\_MODEL.opencr

```
2. When the firmware is completely uploaded, you will see a text string on the terminal: **jump\_to\_fw**

**DANGER**

**Please be aware of pinching your body between the robot joints!!!**

When the firmware is successfully uploaded, OpenCR board will reboot and **the OpenMANIPULATOR-X will move to the initial pose**.  

It is recommended to put the OpenMANIPULATOR-X as a similar pose as shown below image to avoid any physical damage during the initial pose.

![](/assets/images/platform/turtlebot3/manipulation/open_manipulator_gazebo_1.png)


=====================================

h3: [Arduino IDE](#arduino-ide "#arduino-ide")
Contents:

Please be aware that OpenCR board manager **does not support Arduino IDE on ARM based SBC such as Raspberry Pi or NVidia Jetson**.  

In order to upload the OpenCR firmware using Arduino IDE, please follow the below instructions on your PC.

![](/assets/images/icon_unfold.png) Click here to expand more details about the firmware upload using **Arduino IDE**

1. If you are using Linux, please configure the USB port for OpenCR. For other OS(OSX or Windows), you can skip to the step 2 “Install Arduino IDE”.

```
$ wget https://raw.githubusercontent.com/ROBOTIS-GIT/OpenCR/master/99-opencr-cdc.rules
$ sudo cp ./99-opencr-cdc.rules /etc/udev/rules.d/
$ sudo udevadm control --reload-rules
$ sudo udevadm trigger
$ sudo apt install libncurses5-dev:i386

```
2. Install Arduino IDE.
	* [Download the latest Arduino IDE](https://www.arduino.cc/en/software "https://www.arduino.cc/en/software")
3. After completing the installation, run Arduino IDE.
4. Press `Ctrl` + `,` to open the Preferences menu
5. Enter below addresses in the `Additional Boards Manager URLs`.

```
https://raw.githubusercontent.com/ROBOTIS-GIT/OpenCR/master/arduino/opencr_release/package_opencr_index.json

```

![](/assets/images/platform/turtlebot3/preparation/ide1.png)
6. Select `Sketch > Include Library > Manage Libraries...` to install the DYNAMIXEL2Arduino library.
 ![](/assets/images/parts/interface/dynamixel_shield/library_manager_01.png)
7. Search for `DYNAMIXEL2Arduino` from the Library Manager and install the library.
 ![](/assets/images/parts/interface/dynamixel_shield/library_manager_02.png)
8. Open the `TurtleBot3 Manipulation` example.
	* ***File > Examples > turtlebot3 > turtlebot3\_manipulation > turtlebot3\_manipulation***
9. Connect the micro USB of the OpenCR to the PC and select ***Tools > Board > OpenCR > OpenCR Board*** from Arduino IDE.
10. Select the port connected to the OpenCR from ***Tools > Port*** menu.
11. Upload the TurtleBot3 firmware sketch with `Ctrl` + `U` or the upload icon.  

![](/assets/images/platform/turtlebot3/opencr/o3.png)
12. If firmware upload fails, try uploading the firmware under the recovery mode. Below sequence activates the recovery mode of OpenCR and the `STATUS` led of OpenCR will blink periodically.
	* Hold down the `PUSH SW2` button.
	* Press the `Reset` button.
	* Release the `Reset` button.
	* Release the `PUSH SW2` button.

![](/assets/images/parts/controller/opencr10/bootloader_19.png)

**NOTE**: This feature in the selected ROS distribution is not available yet.


=====================================

h2: [Bringup](#bringup "#bringup")
Contents:

**NOTE**: Be sure that OpenCR port is properly assigned on PC. See [turtlebot3\_core.launch](https://github.com/ROBOTIS-GIT/turtlebot3/blob/467c76bc4fa2e34162f57107388839d82d3bcc0e/turtlebot3_bringup/launch/turtlebot3_core.launch#L5 "https://github.com/ROBOTIS-GIT/turtlebot3/blob/467c76bc4fa2e34162f57107388839d82d3bcc0e/turtlebot3_bringup/launch/turtlebot3_core.launch#L5").


=====================================

h3: [Run roscore](#run-roscore "#run-roscore")
Contents:

**[Remote PC]** Run roscore to use ROS 1.

```
$ roscore

```


=====================================

h3: [Define TurtleBot3 Model](#define-turtlebot3-model "#define-turtlebot3-model")
Contents:

**[TurtleBot3 SBC]** Export TurtleBot3 model (`waffle` or `waffle_pi`) if the **TURTLEBOT3\_MODEL** is not defined in the `.bashrc` file.

```
$ export TURTLEBOT3\_MODEL=waffle_pi

```

**NOTE**: TurtleBot3 Model may differ from the hardware configuration of TurtleBot3 such as `burger` or `waffle` or `waffle_pi`.


=====================================

h3: [Run Bringup](#run-bringup "#run-bringup")
Contents:

**[TurtleBot3 SBC]** Run Bringup node for TurtleBot3, and start rosserial and LDS sensor using following command.

```
$ roslaunch turtlebot3_bringup turtlebot3_robot.launch

```


=====================================

h2: [Simulation](#simulation "#simulation")
Contents:

Simulate TurtleBot3 Manipulation using Gazebo by following this section.


=====================================

h3: [Run Gazebo](#run-gazebo "#run-gazebo")
Contents:

**[Remote PC]** Load TurtleBot3 with OpenMANIPULATOR-X into Gazebo world with the following command.

```
$ roslaunch turtlebot3_manipulation_gazebo turtlebot3_manipulation_gazebo.launch

```

![](/assets/images/platform/turtlebot3/manipulation/tb3_omx_gazebo.png)


=====================================

h3: [Run move\_group Node](#run-move-group-node "#run-move-group-node")
Contents:

```
$ roslaunch turtlebot3_manipulation_moveit_config move_group.launch

```


=====================================

h3: [Run RViz](#run-rviz "#run-rviz")
Contents:

**[Remote PC]** Run Rviz to visualize data and to use the interactive marker.

```
$ roslaunch turtlebot3_manipulation_moveit_config moveit_rviz.launch

```


=====================================

h3: [Run ROBOTIS GUI Controller](#run-robotis-gui-controller "#run-robotis-gui-controller")
Contents:

**[Remote PC]** OpenMANIPULATOR can be controlled with using ROBOTIS GUI controller instead of RVIz tool.

```
$ roslaunch turtlebot3_manipulation_gui turtlebot3_manipulation_gui.launch

```

**Note**: This feature is available for Kinetic.

Please be aware that the acutual hardware operation requires [Bringup](#bringup "#bringup") from the TurtleBot3 SBC.

**[Remote PC]** Enter the command below to launch the MoveIt on RViz.

```
$ ros2 launch turtlebot3_manipulation_moveit_config moveit_core.launch.py

```

To operate the robot with the keyboard teleoperation node, the RViz must be terminated.  

Then launch the servo server node and teleoperation nodes on a separate terminal window.

```
$ ros2 launch turtlebot3_manipulation_moveit_config servo.launch.py

```

```
$ ros2 run turtlebot3_manipulation_teleop turtlebot3_manipulation_teleop

```

Please be aware that the acutual hardware operation requires [Bringup](#bringup "#bringup") from the TurtleBot3 SBC.

**[Remote PC]** Enter the command below to launch the MoveIt on RViz.

```
$ ros2 launch turtlebot3_manipulation_moveit_config moveit_core.launch.py

```

To operate the robot with the keyboard teleoperation node, the RViz must be terminated.  

Then launch the servo server node and teleoperation nodes on a separate terminal window.

```
$ ros2 launch turtlebot3_manipulation_moveit_config servo.launch.py

```

```
$ ros2 run turtlebot3_manipulation_teleop turtlebot3_manipulation_teleop

```

**NOTE**: This feature in the selected ROS distribution is not available yet.


=====================================

h3: [How to Run Gazebo](#how-to-run-gazebo "#how-to-run-gazebo")
Contents:

**[Remote PC]** Bringup the TurtleBot3 with OpenMANIPULATOR-X into Gazebo world with the following command.

```
$ ros2 launch turtlebot3_manipulation_bringup gazebo.launch.py

```

![](/assets/images/platform/turtlebot3/manipulation/tb3_manipulation_ros2_gazebo.png)

**TIP**

In order to run with RViz, append the `start_rviz` parameter as below.

```
$ ros2 launch turtlebot3_manipulation_bringup gazebo.launch.py start_rviz:=true

```

To control the TurtleBot3 in the Gazebo simulation, the servo server node of the MoveIt must be launched first.

```
$ ros2 launch turtlebot3_manipulation_moveit_config servo.launch.py

```

Launch the keyboard teleoperation node.

```
$ ros2 run turtlebot3_manipulation_teleop turtlebot3_manipulation_teleop

```

**TIP**

Following keys ard used to control the TurtleBot3.

```
Use o|k|l|; keys to move turtlebot base and use 'space' key to stop the base
Use s|x|z|c|a|d|f|v keys to Cartesian jog
Use 1|2|3|4|q|w|e|r keys to joint jog.
'ESC' to quit.

```


=====================================

h3: [Simulation with MoveIt](#simulation-with-moveit "#simulation-with-moveit")
Contents:

**[Remote PC]** In order to use MoveIt to operate the OpenMANIPULATOR-X in the Gazebo, terminate other Gazebo and RViz tools first.  

Enter the below command to launch RViz with MoveIt configuration.

```
$ ros2 launch turtlebot3_manipulation_moveit_config moveit_gazebo.launch.py

```

The MoveIt Interface on RViz will be launched along with the Gazebo simulator.

![](/assets/images/platform/turtlebot3/manipulation/tb3_manipulation_ros2_rviz.png)

**NOTE**: This feature in the selected ROS distribution is not available yet.


=====================================

h2: [Operate the Actual OpenMANIPULATOR](#operate-the-actual-openmanipulator "#operate-the-actual-openmanipulator")
Contents:

Follow the given instruction to operate your robot.


=====================================

h3: [Run Bringup](#bringup "#bringup")
Contents:

1. **[TurtleBot3 SBC]** Run Bringup node for TurtleBot3, and start rosserial and LDS sensor using following command.

```
$ roslaunch turtlebot3_bringup turtlebot3_robot.launch

```

1. **[Remote PC]** Run Bringup node for OpenMANIPULATOR on TurtleBot3

```
$ roslaunch turtlebot3_manipulation_bringup turtlebot3_manipulation_bringup.launch

```


=====================================

h2: [SLAM](#slam "#slam")
Contents:

Use SLAM feature to update an unknown map with TurtleBot3 and OpenMANIPULATOR

![](/assets/images/platform/turtlebot3/manipulation/open_manipulator_slam.png);


=====================================

h3: [Run SLAM Node](#run-slam-node "#run-slam-node")
Contents:

**[Remote PC]** Run SLAM node for updating an unknown map with TurtleBot3. This node utilizes gmapping package.

```
$ roslaunch turtlebot3_manipulation_slam slam.launch

```


=====================================

h3: [Run turtlebot3\_teleop\_key Node](#run-turtlebot3-teleop-key-node "#run-turtlebot3-teleop-key-node")
Contents:

1. **[Remote PC]** Update the map where TurtleBot3 will navigate using turtlebot3\_teleop\_key node.

```
$ roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch

```

1. **[Remote PC]** Once the map is completely updated, run the map\_saver node to save the updated map.

```
$ rosrun map_server map_saver -f ~/map

```

Be sure to read [SLAM](http://emanual.robotis.com/docs/en/platform/turtlebot3/ros2_slam/#slam "http://emanual.robotis.com/docs/en/platform/turtlebot3/ros2_slam/#slam") manual before use of the following instruction.


=====================================

h3: [Run SLAM Nodes](#run_slam_nodes "#run_slam_nodes")
Contents:

**[Remote PC]**

1. Open a terminal on **Remote PC**.
2. Launch **slam node** using the following command.

```
$ ros2 launch turtlebot3_manipulation_cartographer cartographer.launch.py

```


=====================================

h3: [Run Teleoperation Nodes](#run_teleoperation_nodes "#run_teleoperation_nodes")
Contents:

**[Remote PC]**

1. Open a terminal on **Remote PC**.
2. Launch the servo server node.

```
$ ros2 launch turtlebot3_manipulation_moveit_config servo.launch.py

```
3. Launch **teleop node** using the following command.

```
$ ros2 run turtlebot3_manipulation_teleop turtlebot3_manipulation_teleop

```
4. Use `O`, `K`, `L`, `;` keys to drive the TurtleBot3 platform.


=====================================

h3: [Save the Map](#save_the_map "#save_the_map")
Contents:

**[Remote PC]**

1. Open a terminal on **Remote PC**.
2. Run the nav2\_map\_server to save the current map on RViz.

```
$ ros2 run nav2_map_server map_saver_cli -f ~/map

```

![](/assets/images/platform/turtlebot3/manipulation/open_manipulator_slam.png)

**NOTE**: This feature in the selected ROS distribution is not available yet.


=====================================

h2: [Navigation](#navigation "#navigation")
Contents:

Send TurtleBot3 with OpenMANIPULATOR to the desired position in the map using Navigation node.


=====================================

h3: [Run Navigation Node](#run-navigation-node "#run-navigation-node")
Contents:

**[Remote PC]** Run Navigation node with the following command, which will call Unified Robot Description Format (urdf) and configuration data of RViz to set GUI enviroment, parmeters for Navigation and updated map.

```
$ roslaunch turtlebot3_manipulation_navigation navigation.launch

```

![](/assets/images/platform/turtlebot3/manipulation/tb3_omx_nav.png)


=====================================

h3: [How to Control OpenMANIPULATOR with Navigation](#how-to-control-openmanipulator-with-navigation "#how-to-control-openmanipulator-with-navigation")
Contents:

You can run this node to control OpenMANIPULATOR on TurtleBot3 when TurtleBot3 is approaching to a goal position when Navigation node is running.
However, when TurtleBot3 is in motion, the movement of OpenMANIPULATOR will be unstable by external influences, such as center of gravity, or vibration; so that it is recommended for the manipulator to be used when TurtleBot3 is not driving.


=====================================

h4: [Run Bringup node for OpenMANIPULATOR](#run-bringup-for-openmanipulator "#run-bringup-for-openmanipulator")
Contents:

**[Remote PC]** Run **turtlebot3\_manipulation\_bringup** node just as use of single OpenMANIPULATOR. This node contains **arm\_controller** and **gripper\_controller**.

```
$ roslaunch turtlebot3_manipulation_bringup turtlebot3_manipulation_bringup.launch

```


=====================================

h4: [Run move\_group Node](#run-move-group-node "#run-move-group-node")
Contents:

**move\_group** node supports two interfaces to control OpenMANIPULATOR; **Moveit!** and **ROBOTIS GUI**. Choose either of them according to your preference. In this section, GUI Controller is introduced only.

```
$ roslaunch turtlebot3_manipulation_moveit_config move_group.launch

```

**NOTE**: Please refer to [MoveIt!](https://moveit.ros.org/ "https://moveit.ros.org/") for more details.


=====================================

h3: [Run GUI Controller](#run-gui-controller "#run-gui-controller")
Contents:

Using this interface, you can control OpenMANIPULATOR on TurtleBot3
**[Remote PC]**

```
$ roslaunch turtlebot3_manipulation_gui turtlebot3_manipulation_gui.launch

```

Be sure to read [Navigation](/docs/en/platform/turtlebot3/navigation/#navigation "/docs/en/platform/turtlebot3/navigation/#navigation") manual before use of the following instruction.

1. Open a terminal on **Remote PC**.
2. Launch the navigation file using the following command.

```
$ ros2 launch turtlebot3_navigation2 navigation2.launch.py map:=$HOME/map.yaml

```

![](/assets/images/platform/turtlebot3/manipulation/open_manipulator_navigation.png)

Be sure to read [Navigation](/docs/en/platform/turtlebot3/navigation/#navigation "/docs/en/platform/turtlebot3/navigation/#navigation") manual before use of the following instruction.

1. Open a terminal on **Remote PC**.
2. Launch the navigation file using the following command.

```
$ ros2 launch turtlebot3_manipulation_navigation2 navigation2.launch.py map_yaml_file:=$HOME/map.yaml

```

![](/assets/images/platform/turtlebot3/manipulation/open_manipulator_navigation.png)

Be sure to read [Navigation](/docs/en/platform/turtlebot3/navigation/#navigation "/docs/en/platform/turtlebot3/navigation/#navigation") manual before use of the following instruction.

1. Open a terminal on **Remote PC**.
2. Launch the navigation file using the following command.

```
$ ros2 launch turtlebot3_manipulation_navigation2 navigation2.launch.py map_yaml_file:=$HOME/map.yaml

```

![](/assets/images/platform/turtlebot3/manipulation/open_manipulator_navigation.png)

**NOTE**: This feature in the selected ROS distribution is not available yet.

 Previous Page
Next Page 

$reference = $(".archive");
$(window).resize(function() {
 var newWidth = $reference.width() \* 0.90;
 if (newWidth > 640) { newWidth = 640; }

 // Resize all videos according to aspect ratio
 $("iframe").each(
 function(index, elem) {
 elem.setAttribute("width", (newWidth).toFixed());
 elem.setAttribute("height", (newWidth\*0.56).toFixed());
 }
 );
// Kick off one resize to fix all videos on page load
}).resize();

© 2023 ROBOTIS. Powered by [Jekyll](http://jekyllrb.com "http://jekyllrb.com") & [Minimal Mistakes](https://mademistakes.com/work/minimal-mistakes-jekyll-theme/ "https://mademistakes.com/work/minimal-mistakes-jekyll-theme/").

 var \_gaq = \_gaq || [];
 \_gaq.push(['\_setAccount', 'UA-83196341-13']);
 \_gaq.push(['\_trackPageview']);

 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
 })();

 window.dataLayer = window.dataLayer || [];
 function gtag(){dataLayer.push(arguments);}
 gtag('js', new Date());

 gtag('config', 'G-155KHSC07K');


=====================================

