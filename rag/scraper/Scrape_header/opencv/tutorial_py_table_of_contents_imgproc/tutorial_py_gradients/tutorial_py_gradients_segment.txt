Parsed Headers, Levels and Contents:
h2: Goal
Contents:

In this chapter, we will learn to:

* Find Image gradients, edges etc
* We will see following functions : **[cv.Sobel()](../../d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d "Calculates the first, second, third, or mixed image derivatives using an extended Sobel operator...")**, **[cv.Scharr()](../../d4/d86/group__imgproc__filter.html#gaa13106761eedf14798f37aa2d60404c9 "Calculates the first x- or y- image derivative using Scharr operator. ")**, **[cv.Laplacian()](../../d4/d86/group__imgproc__filter.html#gad78703e4c8fe703d479c1860d76429e6 "Calculates the Laplacian of an image. ")** etc


=====================================

h2: Theory
Contents:

OpenCV provides three types of gradient filters or High-pass filters, Sobel, Scharr and Laplacian. We will see each one of them.


=====================================

h3: 1. Sobel and Scharr Derivatives
Contents:

Sobel operators is a joint Gaussian smoothing plus differentiation operation, so it is more resistant to noise. You can specify the direction of derivatives to be taken, vertical or horizontal (by the arguments, yorder and xorder respectively). You can also specify the size of kernel by the argument ksize. If ksize = -1, a 3x3 Scharr filter is used which gives better results than 3x3 Sobel filter. Please see the docs for kernels used.


=====================================

h3: 2. Laplacian Derivatives
Contents:

It calculates the Laplacian of the image given by the relation, \(\Delta src = \frac{\partial ^2{src}}{\partial x^2} + \frac{\partial ^2{src}}{\partial y^2}\) where each derivative is found using Sobel derivatives. If ksize = 1, then following kernel is used for filtering:

\[kernel = \begin{bmatrix} 0 & 1 & 0 \\ 1 & -4 & 1 \\ 0 & 1 & 0 \end{bmatrix}\]


=====================================

h2: Code
Contents:

Below code shows all operators in a single diagram. All kernels are of 5x5 size. Depth of output image is passed -1 to get the result in np.uint8 type. 

import numpy as npimport cv2 as cvfrom matplotlib import pyplot as pltimg = [cv.imread](../../d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56 "../../d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56")('dave.jpg', cv.IMREAD\_GRAYSCALE)assert img is not None, "file could not be read, check with os.path.exists()"laplacian = [cv.Laplacian](../../d4/d86/group__imgproc__filter.html#gad78703e4c8fe703d479c1860d76429e6 "../../d4/d86/group__imgproc__filter.html#gad78703e4c8fe703d479c1860d76429e6")(img,cv.CV\_64F)sobelx = [cv.Sobel](../../d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d "../../d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d")(img,cv.CV\_64F,1,0,ksize=5)sobely = [cv.Sobel](../../d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d "../../d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d")(img,cv.CV\_64F,0,1,ksize=5)plt.subplot(2,2,1),plt.imshow(img,cmap = 'gray')plt.title('Original'), plt.xticks([]), plt.yticks([])plt.subplot(2,2,2),plt.imshow(laplacian,cmap = 'gray')plt.title('Laplacian'), plt.xticks([]), plt.yticks([])plt.subplot(2,2,3),plt.imshow(sobelx,cmap = 'gray')plt.title('Sobel X'), plt.xticks([]), plt.yticks([])plt.subplot(2,2,4),plt.imshow(sobely,cmap = 'gray')plt.title('Sobel Y'), plt.xticks([]), plt.yticks([])plt.show() Result:

![gradients.jpg](../../gradients.jpg)

image

=====================================

h2: One Important Matter!
Contents:

In our last example, output datatype is cv.CV\_8U or np.uint8. But there is a slight problem with that. Black-to-White transition is taken as Positive slope (it has a positive value) while White-to-Black transition is taken as a Negative slope (It has negative value). So when you convert data to np.uint8, all negative slopes are made zero. In simple words, you miss that edge.

If you want to detect both edges, better option is to keep the output datatype to some higher forms, like cv.CV\_16S, cv.CV\_64F etc, take its absolute value and then convert back to cv.CV\_8U. Below code demonstrates this procedure for a horizontal Sobel filter and difference in results. 

import numpy as npimport cv2 as cvfrom matplotlib import pyplot as pltimg = [cv.imread](../../d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56 "../../d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56")('box.png', cv.IMREAD\_GRAYSCALE)assert img is not None, "file could not be read, check with os.path.exists()"# Output dtype = cv.CV\_8Usobelx8u = [cv.Sobel](../../d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d "../../d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d")(img,cv.CV\_8U,1,0,ksize=5)# Output dtype = cv.CV\_64F. Then take its absolute and convert to cv.CV\_8Usobelx64f = [cv.Sobel](../../d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d "../../d4/d86/group__imgproc__filter.html#gacea54f142e81b6758cb6f375ce782c8d")(img,cv.CV\_64F,1,0,ksize=5)abs\_sobel64f = np.absolute(sobelx64f)sobel\_8u = np.uint8(abs\_sobel64f)plt.subplot(1,3,1),plt.imshow(img,cmap = 'gray')plt.title('Original'), plt.xticks([]), plt.yticks([])plt.subplot(1,3,2),plt.imshow(sobelx8u,cmap = 'gray')plt.title('Sobel CV\_8U'), plt.xticks([]), plt.yticks([])plt.subplot(1,3,3),plt.imshow(sobel\_8u,cmap = 'gray')plt.title('Sobel abs(CV\_64F)'), plt.xticks([]), plt.yticks([])plt.show() Check the result below:

![double_edge.jpg](../../double_edge.jpg)

image

=====================================

h2: Additional Resources
Contents:


=====================================

h2: Exercises
Contents:


=====================================

